report: "report/workflow.rst"

include: "rules/basic.smk"
configfile: "config/config.yaml"
import pandas as pd
from pathlib import Path
# generate centralized sample datasets
bgcflow_util_dir = Path("data/interim/bgcflow_utils")
bgcflow_util_dir.mkdir(parents=True, exist_ok=True)

def extract_project_information(config):
    # load information from config
    print(f"Step 1. Extracting project information from config...\n", file=sys.stderr)
    print(config)
    taxons = config["taxons"]

    taxon_records = []

    for num, p in enumerate(taxons):
        print(
            f"Step 2.{num+1} Getting sample information from: {p['name']}",
            file=sys.stderr,
        )
        # grab a bgcflow pep project
        record = {
            "name": p["name"].replace(" ", "_"),
            "taxon": p["name"].replace("_", " "),
            "reference_only": p.get("reference_only", True),
        }
        taxon_records.append(record)
    taxons_df = pd.DataFrame.from_records(taxon_records, index="name")
    return taxons_df

##### 1. Extract information from config file
TAXONS = extract_project_information(config)

KINGDOM = "bacteria"

# TAXONS = extract_project_information(config)

GTDB_PATHS = []
CUSTOM_FNA = []
STRAINS_FNA = ["Dummy"]
PROKKA_DB_MAP = {}

RULE_FUNCTIONS = {}

##### 3. Wildcard constraints #####
wildcard_constraints:
    assembly_source="all|RefSeq|GenBank",
    taxon="|".join(TAXONS.index.to_list()),

include: "rules/preselect_genomes/preselect_all_genomes.smk"
include: "rules/select_genomes/select_all_genomes.smk"

def get_taxons():
    return TAXONS.index.to_list()
def get_accessions_for_name(name):
    return get_accessions_for_taxon(name)
# def get_fasta_inputs_for_name(name):
#     return [f"data/interim/fasta/{s}.fna" for s in get_accessions_for_name(name)]
# def filter_samples_qc(wildcards, df_samples):
#     qc = pd.read_csv(checkpoints.qc.get().output[0], sep=",", index_col=0, header=0)
#     df_samples_names = set(df_samples.index.to_list())
#     # assert (df_samples_names == qc_samples_names)
#     qc_samples_names = set(qc.index[qc["passed"] == True].to_list())
#     sel = list(df_samples_names & qc_samples_names)
#     return df_samples.loc[sel, :]
def filter_sample_names_qc(sample_names):
    sample_names = set(sample_names)
    qc = pd.read_csv(checkpoints.qc.get().output[0], sep=",", index_col=0, header=0)
    qc_samples_names = set(qc.index[qc["passed"] == True].to_list())
    sel = list(sample_names & qc_samples_names)
    return sel
RULE_FUNCTIONS["qc"] = {"names": get_taxons}
include: "rules/qc/qc_contigs_n50.smk"

resource_mapping = {}
#### Modules #####
include: "rules/ncbi_datasets.smk"

##### 4. Generate user-defined local resources
# custom_resource_dir(config["resources_path"], resource_mapping)

RULE_FUNCTIONS["seqfu"] = {"strains": get_accessions_for_taxon}
include: "rules/seqfu.smk"
include: "rules/checkm_for_missing.smk"
RULE_FUNCTIONS["checkm"] = {"accessions": get_accessions_for_taxon}
include: "rules/checkm.smk"

RULE_FUNCTIONS["gtdbtk_simple"] = {"accessions": get_unclassified_accessions}
include: "rules/gtdbtk_simple.smk"

RULE_FUNCTIONS["gtdb_improved"] = {"taxons": get_taxons}
include: "rules/gtdb_improved.smk"
include: "rules/merge_taxonomy/gtdb_only.smk"
include: "rules/split_species_into_projects.smk"
# get_samples_df = get_species_projects_samples_df
# get_projects = get_species_projects
# get_samples_for_project = get_samples_for_species_project
# get_samples_df_for_project = get_samples_for_species_project

def filtered_accessions_for_project(name):
    return filter_sample_names_qc(get_samples_for_species_project(name))

RULE_FUNCTIONS["prokka"] = {"samples": get_species_projects_samples_df}
include: "rules/prokka.smk"
RULE_FUNCTIONS["roary"] = {"samples": filtered_accessions_for_project}
include: "rules/roary.smk"
RULE_FUNCTIONS["mash"] = {"accessions": filtered_accessions_for_project}
include: "rules/mash.smk"
RULE_FUNCTIONS["automlst_wrapper"] = {"accessions": filtered_accessions_for_project}
include: "rules/automlst_wrapper.smk"
RULE_FUNCTIONS["alleleome"] = {"samples": filtered_accessions_for_project}
include: "rules/alleleome.smk"
RULE_FUNCTIONS["pankb_data_prep"] = {"projects": get_species_projects}
include: "rules/pankb_data_prep.smk"

rule all:
    input:
        # "data/interim/ncbi_datasets/taxon/Moraxellaceae.tsv",
        # "data/interim/ncbi_datasets/taxon/Moraxellaceae.dummy",
        # "data/interim/fasta/GCF_000196795.1.fna",
        # expand("data/interim/ncbi_datasets/taxon/{taxon}.csv", taxon=TAXONS.index.to_list()),
        # expand("data/interim/ncbi_datasets/taxon/{taxon}.dummy", taxon=TAXONS.index.to_list()),
        # expand("data/interim/fasta/{accession}.fna", accession=["GCF_000196795.1"]),
        # lambda _: expand("data/interim/fasta/{accession}.fna", accession=get_all_accessions()),
        # lambda _: expand("data/interim/gtdb/{accession}.json", accession=get_all_accessions()),
        # expand("data/processed/{taxon}/tables/df_gtdb_meta.csv", taxon=TAXONS.index.to_list()),
        expand("data/processed/{taxon}/tables/gtdbtk.bac120.summary.tsv", taxon=TAXONS.index.to_list()),
        # "data/processed/qc/qc_passed.csv",
        # expand("data/interim/split/{taxon}/classification.csv", taxon=TAXONS.index.to_list()),
        # expand("data/interim/gtdb/{taxon}.jsonl", taxon=TAXONS.index.to_list()),
        # expand("data/interim/checkm/{taxon}_missing.txt", taxon=TAXONS.index.to_list()),
        # lambda _: expand("data/processed/{name}/alleleome/Pan/dn_ds.json", name=get_species_projects()),
	    # "data/interim/alleleome/Lacticaseibacillus_paracasei/pangenome_alignments/process_dummy_Pan",

