#%
# description: Generate pangenome, alleleome and PanKB files for a taxonomic family.
# schema: schemas/family_config.schema.yaml
#%
report: "report/workflow.rst"

include: "rules/basic.smk"
configfile: "config/config_pankb_minimal.yaml"
from snakemake.utils import validate

import pandas as pd
import numpy as np
from pathlib import Path
from collections import defaultdict
# generate centralized sample datasets

KINGDOM = "bacteria"

def create_defaultdict():
    return defaultdict(create_defaultdict)
RULE_FUNCTIONS = create_defaultdict()


##### 3. Wildcard constraints #####
wildcard_constraints:
    assembly_source="all|RefSeq|GenBank",
    stage="taxon|species",
    name="[a-zA-Z0-9_\-]+",

resource_mapping = {}

SPECIES_PROJECTS = config.get("species", [])

def throw_error(wildcards):
    raise Exception()

RULE_FUNCTIONS["alleleome"]["samples"] = throw_error
RULE_FUNCTIONS["alleleome"]["pan_core"] = "Pan"
RULE_FUNCTIONS["alleleome"]["stages"] = "species"
RULE_FUNCTIONS["alleleome"]["projects"] = SPECIES_PROJECTS
include: "rules/alleleome.smk"

RULE_FUNCTIONS["pankb_data_prep"]["projects"] = SPECIES_PROJECTS
RULE_FUNCTIONS["pankb_data_prep"]["genomes"] = throw_error
RULE_FUNCTIONS["pankb_data_prep"]["stages"] = "species"
include: "rules/pankb_data_prep.smk"

include: "rules/pankb_nova.smk"

rule all:
    input:
        expand([
                "data/processed/{stage}/pankb/web_data/species/{name}/nova/organism.json",
                "data/processed/{stage}/pankb/web_data/species/{name}/nova/pangene.json",
                "data/processed/{stage}/pankb/web_data/species/{name}/nova/pathway.json",
                "data/processed/{stage}/pankb/web_data/species/{name}/nova/gene.jsonl.gz",
            ], stage="species", name=SPECIES_PROJECTS)
